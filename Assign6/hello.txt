1)
#include <stdio.h>
void merge(int arr[], int l, int mid, int r)
{
    int n1 = mid - l + 1;
    int n2 = r - mid;

    int left[n1], right[n2];

    for (int i = 0; i < n1; i++)
        left[i] = arr[l + i];
    for (int j = 0; j < n2; j++)
        right[j] = arr[mid + 1 + j];
    int i = 0,j=0,k=l;
    while (i < n1 && j < n2)
    {
        if (left[i] <= right[j])
            arr[k++] = left[i++];
        else
            arr[k++] = right[j++];
    }
    while (i < n1)
        arr[k++] = left[i++];
    while (j < n2)
        arr[k++] = right[j++];
}
void mergeSort(int arr[], int l, int r)
{
    if (l < r)
    {
        int mid = (l + r)/ 2;
        mergeSort(arr, l, mid);
        mergeSort(arr, mid + 1, r);
        merge(arr, l, mid, r);
    }
}
int main()
{
    int n;
    scanf("%d",&n);
    int arr[n];
    for(int i=0;i<n;i++)
        scanf("%d",&arr[i]);
    mergeSort(arr, 0, n - 1);
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    return 0;
}

2)
/*
The quickSort function is a recursive function that partitions the array around a pivot, and then sorts the two partitions separately. The partition function is used to partition the array around the pivot. The swap function is used to swap two elements in the array.
*/
#include <stdio.h>
void swap(int *a, int *b)
{
    int t = *a;
    *a = *b;
    *b = t;
}
int partition(int arr[], int low, int high)
{
    int pivot = arr[high];
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++)
    {
        if (arr[j] < pivot)
        {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}
void quickSort(int arr[], int low, int high)
{
    if (low < high)
    {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}
int main()
{
   int n;
    scanf("%d",&n);
    int arr[n];
    for(int i=0;i<n;i++)
        scanf("%d",&arr[i]);
    quickSort(arr, 0, n - 1);
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    return 0;
}

3)
#include <stdio.h>
void swap(int *a, int *b)
{
    int t = *a;
    *a = *b;
    *b = t;
}
void heapify(int arr[], int n, int i)
{
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;
    if (left < n && arr[left] > arr[largest])
        largest = left;
    if (right < n && arr[right] > arr[largest])
        largest = right;
    if (largest != i)
    {
        swap(&arr[i], &arr[largest]);
        heapify(arr, n, largest);
    }
}
void heapSort(int arr[], int n)
{
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);
    for (int i = n - 1; i >= 0; i--)
    {
        swap(&arr[0], &arr[i]);
        heapify(arr, i, 0);
    }
}
int main()
{
    int n;
    scanf("%d", &n);
    int arr[n];
    for (int i = 0; i < n; i++)
        scanf("%d", &arr[i]);
    heapSort(arr, n);
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    return 0;
}

4)
#include <stdio.h>
#include <stdlib.h>
int min(int a, int b) {
    return (a < b) ? a : b;
}
void insertionSort(int arr[], int left, int right)
{
    for (int i = left + 1; i <= right; i++)
    {
        int key = arr[i];
        int j = i - 1;
        while (j >= left && arr[j] > key)
        {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}
void merge(int arr[], int l, int m, int r)
{
    int len1 = m - l + 1, len2 = r - m;
    int left[len1], right[len2];
    for (int i = 0; i < len1; i++)
        left[i] = arr[l + i];
    for (int i = 0; i < len2; i++)
        right[i] = arr[m + 1 + i];

    int i = 0,j = 0,k = l;
    while (i < len1 && j < len2)
    {
        if (left[i] <= right[j])
            arr[k++] = left[i++];
        else
            arr[k++] = right[j++];
    }
    while (i < len1)
        arr[k++] = left[i++];
    while (j < len2)
        arr[k++] = right[j++];
}
void timSort(int arr[], int n, int k)
{
    for (int i = 0; i < n; i += k)
        insertionSort(arr, i, min(i + k - 1, n - 1));

    for (int size = k; size < n; size*=2)
    {
        for (int left = 0; left < n; left += 2 * size)
        {
            int mid = left + size - 1;
            int right = min((left + 2 * size - 1), (n - 1));
            merge(arr, left, mid, right);
        }
    }
}
int main()
{
    int n, k;
    scanf("%d %d", &n, &k);
    int arr[n];
    for (int i = 0; i < n; i++)
        scanf("%d", &arr[i]);
    timSort(arr, n, k);
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    return 0;
}

5)
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
void swap(int *a, int *b)
{
    int t = *a;
    *a = *b;
    *b = t;
}
int partition(int arr[], int low, int high)
{
    int pivot = arr[high];
    int i = (low - 1);
    for (int j = low; j <= high - 1; j++)
    {
        if (arr[j] < pivot)
        {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}
void merge(int arr[], int l, int mid, int r)
{
    int n1 = mid - l + 1;
    int n2 = r - mid;
    int left[n1], right[n2];
    for (int i = 0; i < n1; i++)
        left[i] = arr[l + i];
    for (int j = 0; j < n2; j++)
        right[j] = arr[mid + 1 + j];
    int i = 0,j = 0,k = l;
    while (i < n1 && j < n2)
    {
        if (left[i] <= right[j])
            arr[k++] = left[i++];
        else
            arr[k++] = right[j++];
    }
    while (i < n1)
        arr[k++] = left[i++];
    while (j < n2)
        arr[k++] = right[j++];
}
void mergeSort(int arr[], int l, int r)
{
    if (l < r)
    {
        int mid = (l + r)/ 2;
        mergeSort(arr, l, mid);
        mergeSort(arr, mid + 1, r);
        merge(arr, l, mid, r);
    }
}
void nomkiSort(int arr[], int low, int high, int depth)
{
    if (low < high)
    {
        if (depth == 0)
            mergeSort(arr, low, high);
        else
        {
            int pi = partition(arr, low, high);
            nomkiSort(arr, low, pi - 1, depth - 1);
            nomkiSort(arr, pi + 1, high, depth - 1);
        }
    }
}
int main()
{
    int n;
    scanf("%d", &n);
    int arr[n];
    for (int i = 0; i < n; i++)
        scanf("%d", &arr[i]);
    int depth = 2 * log2(n);
    nomkiSort(arr, 0, n - 1, depth);
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    return 0;
}

6)
#include <stdio.h>
#include <stdlib.h>
long long merge(int arr[], int temp[], int left, int mid, int right)
{
    int i=left, j=mid, k=left;
    long long inv_count = 0;
    while ((i <= mid - 1) && (j <= right))
    {
        if (arr[i] <= arr[j])
            temp[k++] = arr[i++];
        else
        {
            temp[k++] = arr[j++];
            inv_count = inv_count + (mid - i);
        }
    }
    while (i <= mid - 1)
        temp[k++] = arr[i++];
    while (j <= right)
        temp[k++] = arr[j++];
    for (i = left; i <= right; i++)
        arr[i] = temp[i];
    return inv_count;
}
long long mergeSort(int arr[], int temp[], int left, int right)
{
    int mid;
    long long inv_count = 0;
    if (right > left)
    {
        mid = (right + left) / 2;
        inv_count = mergeSort(arr, temp, left, mid);
        inv_count += mergeSort(arr, temp, mid + 1, right);
        inv_count += merge(arr, temp, left, mid + 1, right);
    }
    return inv_count;
}
int main()
{
    int n;
    scanf("%d", &n);
    int *arr = (int *)malloc(n * sizeof(int));
    int *temp = (int *)malloc(n * sizeof(int));
    for (int i = 0; i < n; i++)
        scanf("%d", &arr[i]);
    printf("%lld\n", mergeSort(arr, temp, 0, n - 1));
    return 0;
}

7)
#include <stdio.h>
void swap(int *a, int *b)
{
    int t = *a;
    *a = *b;
    *b = t;
}
void heapify(int arr[], int n, int i)
{
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;
    if (left < n && arr[left] > arr[largest])
        largest = left;
    if (right < n && arr[right] > arr[largest])
        largest = right;
        
    if (largest != i)
    {
        swap(&arr[i], &arr[largest]);
        heapify(arr, n, largest);
    }
}
void heapSort(int arr[], int n)
{
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);
    for (int i = n - 1; i >= 0; i--)
    {
        swap(&arr[0],&arr[i]);
        heapify(arr, i, 0);
    }
}
int main()
{
    int n,k;
    scanf("%d %d", &n,&k);
    int arr[n];
    for (int i = 0; i < n; i++)
        scanf("%d", &arr[i]);
    heapSort(arr, n);
    int sum=0;
    for (int i = 0; i < k; i++)
        sum+=arr[i];
    printf("%d",sum);
    return 0;
}

8)
#include <stdio.h>
#include <stdlib.h>
typedef struct Node
{
    int val;
    int arrIdx;
    int nextIdx;
} Node;
void swap(Node *a, Node *b)
{
    Node temp = *a;
    *a = *b;
    *b = temp;
}
void minHeapify(Node heap[], int i, int heapSize)
{
    int smallest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;
    if (left < heapSize && heap[left].val < heap[smallest].val)
        smallest = left;
    if (right < heapSize && heap[right].val < heap[smallest].val)
        smallest = right;
    if (smallest != i)
    {
        swap(&heap[i], &heap[smallest]);
        minHeapify(heap, smallest, heapSize);
    }
}
void buildHeap(Node heap[], int heapSize)
{
    for (int i = (heapSize - 2) / 2; i >= 0; i--)
        minHeapify(heap, i, heapSize);
}
void mergeKSortedArrays(int arr[][1000], int arrSize[], int k)
{
    Node heap[k];
    int i;
    for (i = 0; i < k; i++)
    {
        heap[i].val = arr[i][0];
        heap[i].arrIdx = i;
        heap[i].nextIdx = 1;
    }
    buildHeap(heap, k);
    while (1)
    {
        Node root = heap[0];
        printf("%d ", root.val);
        if (root.nextIdx < arrSize[root.arrIdx])
        {
            root.val = arr[root.arrIdx][root.nextIdx];
            root.nextIdx += 1;
        }
        else
            root = heap[k-- - 1];
        heap[0] = root;
        if (k <= 0)
            break;
        minHeapify(heap, 0, k);
    }
}
int main()
{
    int k;
    scanf("%d", &k);
    int arr[k][1000];
    int arrSize[k];
    for (int i = 0; i < k; i++)
    {
        scanf("%d", &arrSize[i]);
        for (int j = 0; j < arrSize[i]; j++)
            scanf("%d", &arr[i][j]);
    }
    mergeKSortedArrays(arr, arrSize, k);
    return 0;
}

9)
#include <stdio.h>
#include <stdlib.h>

void swap(int *a, int *b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}
void maxHeapify(int arr[], int n, int i)
{
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;
    if (left < n && arr[left] > arr[largest])
        largest = left;
    if (right < n && arr[right] > arr[largest])
        largest = right;
    if (largest != i)
    {
        swap(&arr[i], &arr[largest]);
        maxHeapify(arr, n, largest);
    }
}
void minHeapify(int arr[], int n, int i)
{
    int smallest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;
    if (left < n && arr[left] < arr[smallest])
        smallest = left;
    if (right < n && arr[right] < arr[smallest])
        smallest = right;
    if (smallest != i)
    {
        swap(&arr[i], &arr[smallest]);
        minHeapify(arr, n, smallest);
    }
}
void insertMax(int arr[], int *n, int x)
{
    (*n)++;
    int i = *n - 1;
    arr[i] = x;
    while (i != 0 && arr[(i - 1) / 2] < arr[i])
    {
        swap(&arr[i], &arr[(i - 1) / 2]);
        i = (i - 1) / 2;
    }
    maxHeapify(arr, *n, 0);
}
void insertMin(int arr[], int *n, int x)
{
    (*n)++;
    int i = *n - 1;
    arr[i] = x;
    while (i != 0 && arr[(i - 1) / 2] > arr[i])
    {
        swap(&arr[i], &arr[(i - 1) / 2]);
        i = (i - 1) / 2;
    }
    minHeapify(arr, *n, 0);
}
int getMedian(int maxHeap[], int sizeMax, int minHeap[], int sizeMin)
{
    if (sizeMax >= sizeMin)
        return maxHeap[0];
    else
        return minHeap[0];
}
int main()
{
    int q;
    scanf("%d", &q);
    int *maxHeap = (int *)malloc(q * sizeof(int));
    int *minHeap = (int *)malloc(q * sizeof(int));
    int *medians = (int *)malloc(q * sizeof(int)); // Array to store medians
    int sizeMax = 0, sizeMin = 0, sizeMedians = 0; // Counter for medians array
    while (q--)
    {
        int query;
        scanf("%d", &query);
        if (query == 1)
        {
            int x;
            scanf("%d", &x);
            if (sizeMax == 0 || x < maxHeap[0])
                insertMax(maxHeap, &sizeMax, x);
            else
                insertMin(minHeap, &sizeMin, x);
            while (abs(sizeMax - sizeMin) > 1)
            {
                if (sizeMax > sizeMin)
                {
                    insertMin(minHeap, &sizeMin, maxHeap[0]);
                    maxHeap[0] = maxHeap[--sizeMax];
                    maxHeapify(maxHeap, sizeMax, 0);
                }
                else
                {
                    insertMax(maxHeap, &sizeMax, minHeap[0]);
                    minHeap[0] = minHeap[--sizeMin];
                    minHeapify(minHeap, sizeMin, 0);
                }
            }
        }
        else if (query == 2)
        {
            int median = getMedian(maxHeap, sizeMax, minHeap, sizeMin);
            medians[sizeMedians++] = median; // Store median instead of printing
        }
    }
    for (int i = 0; i < sizeMedians; i++)
        printf("%d\n", medians[i]);
    return 0;
}

10)
#include <stdio.h>
#include <stdlib.h>
typedef struct Slot
{
    int start;
    int end;
} Slot;
void bubbleSort(Slot slots[], int n)
{
    for (int i = 0; i < n - 1; i++)
    {
        for (int j = 0; j < n - i - 1; j++)
        {
            if (slots[j].start > slots[j + 1].start)
            {
                Slot temp = slots[j];
                slots[j] = slots[j + 1];
                slots[j + 1] = temp;
            }
        }
    }
}
int main()
{
    int n;
    scanf("%d", &n);
    Slot slots[n];
    for (int i = 0; i < n; i++)
        scanf("%d %d", &slots[i].start, &slots[i].end);
    bubbleSort(slots, n);
    int m = 0;
    for (int i = 1; i < n; i++)
    {
        if (slots[m].end >= slots[i].start)
            slots[m].end = slots[m].end > slots[i].end ? slots[m].end : slots[i].end;
        else
            slots[++m] = slots[i];
    }
    printf("%d\n", m + 1);
    for (int i = 0; i <= m; i++)
        printf("%d %d\n", slots[i].start, slots[i].end);
    return 0;
}