1)
#include <stdio.h>

int max_palindrome(char s[],int n){
    int start=0;
    int end=1;
    for(int i=1;i<n;i++){
        int l=i-1;
        int h=i;
        while(l>=0 && h<n &&s[h]==s[l]){
            if(h-l+1>end){
                start=l;
                end=h-l+1;
            }
            l--;
            h++;
        }
    }
    for(int i=1;i<n;i++){
        int l=i-1;
        int h=i+1;
        while(l>=0 && h<n &&s[h]==s[l]){
            if(h-l+1>end){
                start=l;
                end=h-l+1;
            }
            l--;
            h++;
        }
    }
    return end;
}

int main(){
    int n;
    scanf("%d",&n);
    char s[n];
    scanf("%s",s);
    printf("%d",max_palindrome(s,n));

}
2)
#include<stdio.h>
int max_str(char a[],int n)
{
    int visited[256];
    for(int i=0;i<256;i++)
        visited[i]=-1;

    int start=0,result=0;
    for(int end=0;end<n;end++)
    {
        if(visited[a[end]]!=-1 && visited[a[end]]>=start)
            start=visited[a[end]]+1;
        visited[a[end]]=end;
        if(end-start+1>result)
            result=end-start+1;
    }
    return result;

}
int main(){
    int n;
    scanf("%d",&n);
    char a[n];
    scanf("%s",a);
    printf("%d",max_str(a,n));

}
3)
#include <stdio.h>
//This uses two pointer approach
void reverse(char* begin, char* end) {
    char temp;
    while (begin < end) {
        temp = *begin;
        *begin++ = *end;
        *end-- = temp;
    }
}

void reverseWords(char* s) {
    char* word_begin = s;
    char* temp = s;

    while (*temp) {
        temp++;
        if (*temp == '\0') {
            reverse(word_begin, temp - 1);
        } else if (*temp == ' ') {
            reverse(word_begin, temp - 1);
            word_begin = temp + 1;
        }
    }
}

int main() {
    int n;
    scanf("%d",&n);
    char s[n];
    scanf(" %[^\n]", s);
    reverseWords(s);
    printf("%s", s);
    return 0;
}
4)
#include<stdio.h>
int main()
{
    int n,j=0;
    scanf("%d",&n);
    char str[n],b[n];
    scanf(" %[^\n]",str);
    int num[n];
    for(int i=0;i<n;i++)
    {
        if(str[i]=='a' || str[i]=='e' || str[i]=='i' || str[i]=='o' || str[i]=='u')
        { 
            num[i]=-1;
            b[j++]=str[i];
        }
    }
    for(int i=0;i<n;i++)
    {
        if(num[i]==-1)
        printf("%c",b[(j--)-1]);
        else
        printf("%c",str[i]);
    }
}

5)
#include<stdio.h>
void mergeArrays(int a[], int b[], int n, int m)
{
    int i = 0, j = 0, k = 0;

    while (i<n && j <m) {
        if (a[i] < b[j])
            printf("%d ",a[i++]);
        else
            printf("%d ",b[j++]);
    }

    while (i < n)
        printf("%d ",a[i++]);

    while (j < m)
        printf("%d ",b[j++]);
}
int main()
{
    int n,m;
    scanf("%d %d",&n,&m);
    int a[n],b[m];
    for(int i=0;i<n;i++)
    scanf("%d",&a[i]);
    for(int i=0;i<m;i++)
    scanf("%d",&b[i]);
    mergeArrays(a,b,n,m);

}

6)
#include<stdio.h>
//This uses sliding window
int main() {
    int n, k, x, c = 0;
    scanf("%d %d %d", &n, &k, &x);
    int a[n];
    int sum = 0;
    for(int i = 0; i < n; i++)
        scanf("%d", &a[i]);

    for(int i = 0; i < k; i++)
        sum += a[i];

    for(int i = k; i <= n; i++)
    {
        if(sum >= x * k)
            c++;    
        if(i < n)
            sum = sum - a[i - k] + a[i];
    }
    printf("%d", c);
    return 0;
}

7)
#include <stdio.h>
//This also uses two pointer approach
int maxweight(int n, int a[])
{
    int i = 0, j = n - 1;
    int leftSum = 0, rightSum = 0, maxSum = 0;

    while (i <= j)
    {
        if (leftSum <= rightSum)
            leftSum += a[i++];
        else 
            rightSum += a[j--];
        if (leftSum == rightSum)
            maxSum = leftSum;
    }
    return maxSum;
}

int main()
{
    int n;
    scanf("%d", &n);
    int a[n];
    for (int i = 0; i < n; i++)
        scanf("%d", &a[i]);
    printf("%d", maxweight(n, a));
    return 0;
}

8)#include <stdio.h>
int n, k;
long long a[100005], satisfied[60];
int current, max;

int max_clients()
{
    int i, j;
    for (i = 0; i < k; i++)
    {
        for (j = 0; j < 60; j++)
        {
            if (a[i] & (1LL << j))
            {
                if (satisfied[j] == 0)
                    current++;
                satisfied[j]++;
            }
        }
    }

    max = current;

    for (i = k; i < n; i++)
    {
        for (j = 0; j < 60; j++)
        {
            if (a[i - k] & (1LL << j))
            {
                satisfied[j]--;
                if (satisfied[j] == 0)
                    current--;
            }
            if (a[i] & (1LL << j))
            {
                if (satisfied[j] == 0)
                    current++;
                satisfied[j]++;
            }
        }
        if (current > max)
            max = current;
    }
    return max;
}
int main() {
    scanf("%d %d", &n, &k);
    for (int i = 0; i < n; i++) 
        scanf("%lld", &a[i]);
    printf("%d\n", max_clients());
    return 0;
}

9)
#include <stdio.h>

int isPrime(int n)
{
    if (n <= 1) {
        return 0;
    }
    if (n == 2) {
        return 1;
    }
    if (n % 2 == 0) {
        return 0;
    }
    for (int i = 3; i <= sqrt(n); i += 2) {
        if (n % i == 0) {
            return 0;
        }
    }
    return 1;
}

long long productOfNonPrimes(int arr[], int n)
{
    long long modulus=1000000007;
    long long product = 1;
    int hasNonPrime = 0;
    for (int i = 0; i < n; i++) {
        if (!isPrime(arr[i])) {
            product = (product * arr[i]) % modulus;
            hasNonPrime = 1;
        }
    }
    return hasNonPrime ? product : -1;
}

int main() {
    int n;
    scanf("%d", &n);
    int arr[n];
    for (int i = 0; i < n; i++)
        scanf("%d", &arr[i]);

    long long product = productOfNonPrimes(arr, n);
    printf("%lld", product);

    return 0;
} 

10)#include<stdio.h>
long long int modulus=1000000007;
long long int power(long long int base, long long int exponent)
{
    if (exponent == 0)
        return 1;
    else if (exponent % 2 == 0)
        return power((base * base) % modulus, exponent / 2) % modulus;
    else
        return (base * power((base * base) % modulus, (exponent - 1) / 2)) % modulus;
}
int main()
{
    int n;
    long long int pro=1;
    scanf("%d",&n);
    long long int a[n],b[n];
    for(int i=0;i<n;i++)
        scanf("%lld",&a[i]);
    for(int i=0;i<n;i++)
        scanf("%lld",&b[i]);
    for(int i = 0; i < n; i++)
    {
        long long int product=((long long int)(power(a[i],b[i])));
        pro=(pro*product)%modulus;
    }
    printf("%lld",pro);
    return 0;
}