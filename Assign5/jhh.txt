1)
#include <stdio.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node *next;
} *first = NULL, *second = NULL, *third = NULL;
void create(int a[], int n)
{
    struct node *t, *last;
    first = (struct node *)malloc(sizeof(struct node));
    first->data = a[0];
    first->next = NULL;
    last = first;
    for (int i = 1; i < n; i++)
    {
        t = (struct node *)malloc(sizeof(struct node));
        t->data = a[i];
        t->next = NULL;
        last->next = t;
        last = t;
    }
}
void create2(int a[], int n)
{
    struct node *t, *last;
    second = (struct node *)malloc(sizeof(struct node));
    second->data = a[0];
    second->next = NULL;
    last = second;
    for (int i = 1; i < n; i++)
    {
        t = (struct node *)malloc(sizeof(struct node));
        t->data = a[i];
        t->next = NULL;
        last->next = t;
        last = t;
    }
}
void create3()
{
    struct node *t, *last;
    struct node *p = first;
    struct node *q = second;
    int carry = 0;
    while (p != NULL || q != NULL)
    {
        int x = (p != NULL) ? p->data : 0;
        int y = (q != NULL) ? q->data : 0;
        int sum = x + y + carry;
        carry = sum / 10;
        t = (struct node *)malloc(sizeof(struct node));
        t->data = sum % 10;
        t->next = NULL;
        if (third == NULL)
        {
            third = t;
            last = third;
        }
        else
        {
            last->next = t;
            last = t;
        }
        if (p != NULL)
            p = p->next;
        if (q != NULL)
            q = q->next;
    }
    if (carry > 0)
    {
        t = (struct node *)malloc(sizeof(struct node));
        t->data = carry;
        t->next = NULL;
        last->next = t;
    }
}
void display(struct node *p)
{
    while (p != NULL)
    {
        printf("%d ", p->data);
        p = p->next;
    }
}
int main()
{
    int m, n;
    scanf("%d %d", &m, &n);
    int a[m], b[n];
    for (int i = 0; i < m; i++)
        scanf("%d", &a[i]);
    for (int i = 0; i < n; i++)
        scanf("%d", &b[i]);
    create(a, m);
    create2(b, n);
    create3();
    display(third);
}

2)
#include <stdio.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node *next;
} *first = NULL, *second = NULL;

void create(int a[], int n)
{
    struct node *t, *last;
    first = (struct node *)malloc(sizeof(struct node));
    first->data = a[0];
    first->next = NULL;
    last = first;
    for (int i = 1; i < n; i++)
    {
        t = (struct node *)malloc(sizeof(struct node));
        t->data = a[i];
        t->next = NULL;
        last->next = t;
        last = t;
    }
}
void create2(int a[], int n)
{
    struct node *t, *last;
    second = (struct node *)malloc(sizeof(struct node));
    second->data = a[0];
    second->next = NULL;
    last = second;
    for (int i = 1; i < n; i++)
    {
        t = (struct node *)malloc(sizeof(struct node));
        t->data = a[i];
        t->next = NULL;
        last->next = t;
        last = t;
    }
}
void display(struct node *p)
{
    while (p != NULL)
    {
        printf("%d ", p->data);
        p = p->next;
    }
}
struct node *merge(struct node *p, struct node *q)
{
    struct node *last, *third;
    if (p->data < q->data)
    {
        last = third = p;
        p = p->next;
        third->next = NULL;
    }
    else
    {
        last = third = q;
        q = q->next;
        third->next = NULL;
    }
    while (p && q)
    {
        if (p->data < q->data)
        {
            last->next = p;
            last = p;
            p = p->next;
            last->next = NULL;
        }
        else
        {
            last->next = q;
            last = q;
            q = q->next;
            last->next = NULL;
        }
    }
    if (p != NULL)
    {
        last->next = p;
    }
    if (q != NULL)
    {
        last->next = q;
    }
    return third;
}
int main()
{
    int m, n;
    scanf("%d %d", &m, &n);
    int a[m], b[n];
    for (int i = 0; i < m; i++)
    {
        scanf("%d", &a[i]);
    }
    for (int i = 0; i < n; i++)
    {
        scanf("%d", &b[i]);
    }
    create(a, m);
    create2(b, n);
    merge(first, second);
    struct node *third = (first, second);
    display(third);
}

3)
#include <stdio.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node *next;
} *first = NULL;

void create(int a[], int n)
{
    struct node *last, *t;
    first = (struct node *)malloc(sizeof(struct node));
    first->data = a[0];
    first->next = NULL;
    last = first;
    for (int i = 1; i < n; i++)
    {
        t = (struct node *)malloc(sizeof(struct node));
        t->data = a[i];
        t->next = NULL;
        last->next = t;
        last = t;
    }
}
void reverse(struct node *q, struct node *p)
{
    if (p != NULL)
    {
        reverse(p, p->next);
        p->next = q;
    }
    else
    {
        first = q;
    }
}
void display(struct node *p)
{
    while (p != NULL)
    {
        printf("%d ", p->data);
        p = p->next;
    }
}
int main()
{
    int n;
    scanf("%d", &n);
    int a[n];
    for (int i = 0; i < n; i++)
    {
        scanf("%d", &a[i]);
    }
    create(a, n);
    reverse(NULL, first);
    display(first);
}

4)
#include <stdio.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node *next;
} *first = NULL;
void create(int a[], int n)
{
    struct node *t, *last;
    first = (struct node *)malloc(sizeof(struct node));
    first->data = a[0];
    first->next = NULL;
    last = first;
    for (int i = 1; i < n; i++)
    {
        t = (struct node *)malloc(sizeof(struct node));
        t->data = a[i];
        t->next = NULL;
        last->next = t;
        last = t;
    }
    last->next = first;
}
void display(struct node *p)
{
    do
    {
        printf("%d ", p->data);
        p = p->next;
    } while (p != first);
}
void rotate(int k)
{
    for (int i = 0; i < k; i++)
    {
        first = first->next;
    }
}
int main()
{
    int n, k;
    scanf("%d %d", &n, &k);
    int a[n];
    for (int i = 0; i < n; i++)
    {
        scanf("%d", &a[i]);
    }
    create(a, n);
    rotate(k);
    display(first);
}

5)
#include <stdio.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node *next;
} *first = NULL;
void create(int a[], int n)
{
    struct node *t, *last;
    first = (struct node *)malloc(sizeof(struct node));
    first->data = a[0];
    first->next = NULL;
    last = first;
    for (int i = 1; i < n; i++)
    {
        t = (struct node *)malloc(sizeof(struct node));
        t->data = a[i];
        t->next = NULL;
        last->next = t;
        last = t;
    }
    last->next = first;
}
int disappear(int n, int k)
{
    struct node *p = first;
    struct node *q = NULL;
    if (k == 1)
    {
        return n;
    }
    if (n == 1)
    {
        return 1;
    }
    while (n > 1)
    {
        for (int i = 1; i < k; i++)
        {
            q = p;
            p = p->next;
        }
        q->next = p->next;
        if (p == first)
        {
            p = p->next;
        }

        p = q->next;
        n--;
    }
    return p->data;
}
int main()
{
    int n, k;
    scanf("%d %d", &n, &k);
    int a[n];
    for (int i = 0; i < n; i++)
    {
        a[i] = i + 1;
    }
    create(a, n);
    printf("%d", disappear(n, k));
}


6)
#include <stdio.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node *next;
} *first = NULL;

void create(int a[], int n)
{
    struct node *t, *last;
    first = (struct node *)malloc(sizeof(struct node));
    first->data = a[0];
    first->next = NULL;
    last = first;
    for (int i = 1; i < n; i++)
    {
        t = (struct node *)malloc(sizeof(struct node));
        t->data = a[i];
        t->next = NULL;
        last->next = t;
        last = t;
    }
}
void display(struct node *p)
{
    while (p != NULL)
    {
        printf("%d ", p->data);
        p = p->next;
    }
}
void dlt_duplicate()
{
    struct node *p = first;
    struct node *q = p->next;
    while (q != NULL)
    {
        if (p->data != q->data)
        {
            p = q;
            q = q->next;
        }
        else
        {
            p->next = q->next;
            free(q);
            q = p->next;
        }
    }
}
int main()
{
    int n;
    scanf("%d", &n);
    int a[n];
    for (int i = 0; i < n; i++)
        scanf("%d", &a[i]);
    create(a, n);
    dlt_duplicate();
    display(first);
}

7)
#include <stdio.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node *next;
} *first = NULL;
void create(int a[], int n)
{
    struct node *t, *last;
    first = (struct node *)malloc(sizeof(struct node));
    first->data = a[0];
    first->next = NULL;
    last = first;
    for (int i = 1; i < n; i++)
    {
        t = (struct node *)malloc(sizeof(struct node));
        t->data = a[i];
        t->next = NULL;
        last->next = t;
        last = t;
    }
    last->next = first;
}
int answer(int a, int b, int n)
{
    struct node *p = first;
    struct node *q = first;
    for (int i = 1; i < a; i++)
    {
        p = p->next;
    }
    for (int i = 1; i < b; i++)
    {
        q = q->next;
    }
    while (p->data != q->data)
    {
        p = p->next->next;
        q = q->next;
    }
    return p->data;
}
int main()
{
    int n, a, b;
    scanf("%d %d %d", &n, &a, &b);
    int a1[n];
    for (int i = 0; i < n; i++)
    {
        a1[i] = i + 1;
    }
    create(a1, n);
    int ans = answer(a, b, n);
    printf("%d", ans);
}

8)
#include <stdio.h>
#include <stdlib.h>
int n;
struct node
{
    struct node *prev;
    int data;
    struct node *next;
} *first = NULL;
void create(int a[])
{
    struct node *t, *last;
    first = (struct node *)malloc(sizeof(struct node));
    first->data = a[0];
    first->next = NULL;
    first->prev = NULL;
    last = first;
    for (int i = 1; i < n; i++)
    {
        t = (struct node *)malloc(sizeof(struct node));
        t->data = a[i];
        t->next = last->next;
        t->prev = last;
        last->next = t;
        last = t;
    }
}
void insert_first(int x)
{
    struct node *t = (struct node *)malloc(sizeof(struct node));
    t->data = x;
    t->next = first;
    t->prev = NULL;
    first->prev = t;
    first = t;
}
void insert_last(int x)
{
    struct node *p = first;
    struct node *t = (struct node *)malloc(sizeof(struct node));
    t->data = x;
    for (int i = 1; i < n; i++)
    {
        p = p->next;
    }
    t->next = NULL;
    t->prev = p;
    p->next = t;
}
void delete_first()
{
    struct node *p = first;
    first = first->next;
    free(p);
    if (first)
        first->prev = NULL;
}
void delete_last()
{
    if (first == NULL)
    {
        printf("-1\n"); // Handle case where the list is empty
        return;
    }
    struct node *p = first;
    while (p->next != NULL)
        p = p->next;

    if (p->prev != NULL)
        p->prev->next = NULL;
    else
        first = NULL;
    free(p);
}

void display(struct node *p)
{
    if (p == NULL)
        printf("-1\n");
    while (p != NULL)
    {
        printf("%d ", p->data);
        p = p->next;
    }
    printf("\n");
}
void rev_display(struct node *p)
{
    if (p == NULL)
        printf("-1\n");
    while (p->next != NULL)
        p = p->next;

    while (p != NULL)
    {
        printf("%d ", p->data);
        p = p->prev;
    }
    printf("\n");
}
int main()
{
    int q;
    scanf("%d %d", &n, &q);
    int a[n];
    for (int i = 0; i < n; i++)
        scanf("%d", &a[i]);
    create(a);
    for (int i = 0; i < q; i++)
    {
        int op;
        scanf("%d", &op);
        if (op == 1)
        {
            int element;
            scanf("%d", &element);
            insert_first(element);
        }
        else if (op == 2)
        {
            int element;
            scanf("%d", &element);
            insert_last(element);
        }
        else if (op == 3)
            delete_first();
        else if (op == 4)
            delete_last();
        else if (op == 5)
            display(first);
        else if (op == 6)
            rev_display(first);
    }
}

9)
#include <stdio.h>
#include <stdlib.h>
struct node
{
    char data;
    struct node *next;
} *first = NULL, *second = NULL;

void create(char s[], int n)
{
    struct node *t, *last;
    first = (struct node *)malloc(sizeof(struct node));
    first->data = s[0];
    first->next = NULL;
    last = first;
    for (int i = 1; i < n; i++)
    {
        t = (struct node *)malloc(sizeof(struct node));
        t->data = s[i];
        t->next = NULL;
        last->next = t;
        last = t;
    }
}
void create2(char s[], int n)
{
    struct node *t, *last;
    second = (struct node *)malloc(sizeof(struct node));
    second->data = s[0];
    second->next = NULL;
    last = second;
    for (int i = 1; i < n; i++)
    {
        t = (struct node *)malloc(sizeof(struct node));
        t->data = s[i];
        t->next = NULL;
        last->next = t;
        last = t;
    }
}
void reverse(struct node *q, struct node *p)
{
    if (p != NULL)
    {
        reverse(p, p->next);
        p->next = q;
    }
    else
    {
        first = q;
    }
}
int palindrome()
{

    while (second != NULL && first != NULL)
    {
        if (first->data != second->data)
        {
            return 0;
        }
        first = first->next;
        second = second->next;
    }
    return 1;
}
int main()
{
    int n;
    scanf("%d", &n);
    char s[n + 1];
    scanf("%s", s);

    s[n] = '\0';
    create(s, n);
    create2(s, n);
    reverse(NULL, first);
    palindrome();
    if (palindrome())
    {
        printf("YES");
    }
    else
    {
        printf("NO");
    }
}
