1)
#include<bits/stdc++.h>
using namespace std;
vector<int> adj[10001];
int maxD, maxNode;
void dfs(int node, int d, int parent)
{
    if(d > maxD) maxD = d, maxNode = node;
    for(auto child: adj[node])
        if(child != parent)
            dfs(child, d + 1, node);
}
int main()
{
    int edges;
    cin >> edges;
    int vertices = edges + 1;
    for(int i = 0; i < edges; i++)
    {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    maxD = -1;
    dfs(1, 0, -1);
    maxD = -1;
    dfs(maxNode, 0, -1);
    cout << maxD+1 << endl;
    return 0;
}

2)
#include<bits/stdc++.h>
using namespace std;
const int MAX = 1e4 + 5;
typedef pair<long long, int> PII;
bool marked[MAX];
vector <PII> adj[MAX];
long long prim(int x)
{
    priority_queue<PII, vector<PII>, greater<PII> > Q;
    int y;
    long long minimumCost = 0;
    PII p;
    Q.push(make_pair(0, x));
    while(!Q.empty())
    {
        p = Q.top();
        Q.pop();
        x = p.second;
        if(marked[x] == true)
            continue;
        minimumCost += p.first;
        marked[x] = true;
        for(int i = 0;i < adj[x].size();++i)
        {
            y = adj[x][i].second;
            if(marked[y] == false)
                Q.push(adj[x][i]);
        }
    }
    return minimumCost;
}
int main()
{
    int edges, x, y;
    int nodes=edges+1;
    long long weight, minimumCost;
    cin >> edges;
    for(int i = 0;i < edges;++i)
    {
        cin >> x >> y >> weight;
        adj[x].push_back(make_pair(weight, y));
        adj[y].push_back(make_pair(weight, x));
    }
    minimumCost = prim(1);
    cout << minimumCost << endl;
    return 0;
}

3)
#include<bits/stdc++.h>
using namespace std;
vector<int> adj[10001];
int depth[10001];
int sum[10001];
void dfs(int node, int d, int parent) 
{
    depth[node] = d;
    sum[node] = d;
    for(auto child: adj[node])
        if(child != parent)
        {
            dfs(child, d + 1, node);
            sum[node] += sum[child];
        }
}
int main()
{
    int edges;
    cin >> edges;
    int vertices = edges + 1;
    for(int i = 0; i < edges; i++)
    {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    dfs(1, 0, -1);
    int total=0;
    for(int i = 1; i <= vertices; i++)
        total+=sum[i];
    cout<<total/2<<endl;
    return 0;
}

4)
#include<bits/stdc++.h>
using namespace std;
vector<int> adj[1001];
bool visited[1001];
int prevNode[1001];
void bfs(int src)
{
    queue<int> q;
    visited[src] = true;
    q.push(src);
    prevNode[src] = -1;
    while(!q.empty())
    {
        int node = q.front();
        q.pop();
        for(int child : adj[node])
            if(!visited[child])
            {
                q.push(child);
                visited[child] = true;
                prevNode[child] = node;
            }
    }
}
vector<int> shortest_path(int src, int dest)
{
    vector<int> path;
    for(int at = dest; at != -1; at = prevNode[at])
        path.push_back(at);
    reverse(path.begin(), path.end());
    if(path[0] == src) return path;
    return {};
}
int main()
{
    int nodes, edges,source, destination;
    cin >> nodes >> edges >> source >> destination;
    for(int i = 0; i < edges; i++)
    {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    bfs(source);
    vector<int> path = shortest_path(source, destination);
    if(path.empty())
        cout << "No path found" << endl;
    else
    {
        for(int node : path)
            cout << node << " ";
        cout << endl;
    }
    return 0;
}

5)
#include<bits/stdc++.h>
using namespace std;
vector<int> adj[100001];
bool visited[100001];
vector<int> result;
bool possible = true;
int color[100001];
void dfs(int node)
{
    color[node] = 1;
    for(int child : adj[node])
        if(color[child] == 0)
            dfs(child);
        else if(color[child] == 1)
            possible = false;
    color[node] = 2;
    result.push_back(node);
}
int main()
{
    int n, m;
    cin >> n >> m;
    for(int i = 0; i < m; i++)
    {
        int a, b;
        cin >> a >> b;
        adj[a].push_back(b);
    }
    for(int i = 1; i <= n; i++)
        if(color[i] == 0)
            dfs(i);
    if(!possible)
        cout << "IMPOSSIBLE" << endl;
    else
    {
        reverse(result.begin(), result.end());
        for(int node : result)
            cout << node << " ";
        cout << endl;
    }
    return 0;
}

6)
#include<bits/stdc++.h>
using namespace std;
const int MAXN = 1e5+5;
vector<int> tree[MAXN];
int subtree_size[MAXN];
int n;
void dfs(int node, int parent)
{
    subtree_size[node] = 1;
    for(auto& child : tree[node])
        if(child != parent)
        {
            dfs(child, node);
            subtree_size[node] += subtree_size[child];
        }
}
int find_centroid(int node, int parent)
{
    for(auto& child : tree[node])
        if(child != parent && subtree_size[child] > n/2)
            return find_centroid(child, node);
    return node;
}
int main()
{
    cin >> n;
    for(int i = 0; i < n-1; i++)
    {
        int u, v;
        cin >> u >> v;
        tree[u].push_back(v);
        tree[v].push_back(u);
    }
    dfs(1, -1);
    int centroid = find_centroid(1, -1);
    cout << centroid << endl;
    return 0;
}

7)
#include<bits/stdc++.h>
using namespace std;
const int MAXN = 1e5+5;
const long long INF = 1e18;
vector<pair<int, int>> adj[MAXN];
long long dist[MAXN];
void dijkstra(int src)
{
    priority_queue<pair<long long, int>, vector<pair<long long, int>>, greater<pair<long long, int>>> pq;
    fill(dist, dist + MAXN, INF);
    dist[src] = 0;
    pq.push({0, src});
    while(!pq.empty())
    {
        int node = pq.top().second;
        long long d = pq.top().first;
        pq.pop();
        if(d != dist[node]) continue;
        for(auto& edge : adj[node])
        {
            int next_node = edge.first;
            long long cost = edge.second;
            if(dist[node] + cost < dist[next_node])
            {
                dist[next_node] = dist[node] + cost;
                pq.push({dist[next_node], next_node});
            }
        }
    }
}
int main()
{
    int n, m;
    cin >> n >> m;
    for(int i = 0; i < m; i++)
    {
        int a, b, c;
        cin >> a >> b >> c;
        adj[a].push_back({b, c});
    }
    dijkstra(1);
    for(int i = 1; i <= n; i++)
        cout << dist[i] << " ";
    return 0;
}

8)
#include<bits/stdc++.h>
using namespace std;
const int MAXN = 2500+5;
const long long INF = 1e18;
vector<pair<int, int>> adj[MAXN];
long long dist[MAXN];
int parent[MAXN];
void bellman_ford(int src, int n)
{
    fill(dist, dist + MAXN, INF);
    dist[src] = 0;
    int x;
    for(int i = 0; i < n; i++)
    {
        x = -1;
        for(int j = 1; j <= n; j++)
            for(auto& edge : adj[j])
            {
                int next_node = edge.first;
                long long cost = edge.second;
                if(dist[j] + cost < dist[next_node])
                {
                    dist[next_node] = dist[j] + cost;
                    parent[next_node] = j;
                    x = next_node;
                }
            }
    }
    if(x == -1)
        cout << "NO" << endl;
    else
    {
        for(int i = 1; i <= n; i++)
            x = parent[x];
        vector<int> cycle;
        for(int v = x;; v = parent[v])
        {
            cycle.push_back(v);
            if(v == x && cycle.size() > 1) break;
        }
        reverse(cycle.begin(), cycle.end());
        cout << "YES" << endl;
        for(int v : cycle)
            cout << v << " ";
        cout << endl;
    }
}
int main()
{
    int n, m;
    cin >> n >> m;
    for(int i = 0; i < m; i++)
    {
        int a, b, c;
        cin >> a >> b >> c;
        adj[a].push_back({b, c});
    }
    bellman_ford(1, n);
    return 0;
}

9)
#include<bits/stdc++.h>
using namespace std;
const int MAXN = 500+5;
int grid[MAXN][MAXN];
bool visited[MAXN][MAXN];
int dx[4] = {-1, 0, 1, 0};
int dy[4] = {0, 1, 0, -1};
int m, n;
void dfs(int x, int y)
{
    visited[x][y] = true;
    for(int i = 0; i < 4; i++)
    {
        int nx = x + dx[i],ny = y + dy[i];
        if(nx >= 0 && nx < m && ny >= 0 && ny < n && grid[nx][ny] && !visited[nx][ny])
            dfs(nx, ny);
    }
}
int main()
{
    cin >> m >> n;
    for(int i = 0; i < m; i++)
        for(int j = 0; j < n; j++)
            cin >> grid[i][j];
    int count = 0;
    for(int i = 0; i < m; i++)
        for(int j = 0; j < n; j++)
            if(grid[i][j] && !visited[i][j])
            {
                dfs(i, j);
                count++;
            }
    cout<< count << endl;
    return 0;
}

10)
#include<bits/stdc++.h>
using namespace std;
const int MAXN = 1e5+5;
vector<int> adj[MAXN];
bool visited[MAXN];
void dfs(int node)
{
    visited[node] = true;
    for(int next_node : adj[node])
        if(!visited[next_node])
            dfs(next_node);
}
int main()
{
    int n, m;
    cin >> n >> m;
    for(int i = 0; i < m; i++)
    {
        int a, b;
        cin >> a >> b;
        adj[a].push_back(b);
        adj[b].push_back(a);
    }
    int count = 0;
    for(int i = 1; i <= n; i++)
        if(!visited[i])
        {
            dfs(i);
            count++;
        }
    cout << count << endl;
    return 0;
}
